#!/bin/bash
#
# matiri: backup mysql databases in parallel, then tar them together; record the info in sqlite3 db (if available)
#
# Author: GNewton 2013.10.09 glen.newton@gmail.com
# Copyright 2013 Government of Canada and Glen Newton
# Apache v2 License
#
set -e
readonly LOG=true

readonly DEPENDENCIES=(tar xargs nproc date readlink)

############# Modifiable by command line (not yet: future feature) ###########
# Right now you need to modify these directly  #
#
# Root location of where backups stored: CHANGE THIS!!!
readonly BASE_DESTINATION_DIR="/tmp/backups"

export ERROR_MESSAGE=""

# This depends more on the server machine: too high and mysqld load goes very high on server;
readonly CONCURRENCY_LEVEL=$(echo `nproc=$(expr $(nproc) + 1); echo $(expr $nproc / 2)`)

readonly DESTINATION_TMP_PREFIX='mysql_backup'
#################

readonly DESTINATION_DIR=${BASE_DESTINATION_DIR}/$(date +%Y)/$(date +%m)

readonly DB_FILE="$BASE_DESTINATION_DIR/backups.sqlite3.db"
readonly DB_FILE_COPY="$DESTINATION_DIR/backups_copy.sqlite3.db"
readonly MYSQL_BIN='/usr/bin/mysql'
readonly LIST_DATABASES='list_mysql_databases_by_size.sql'
timeStamp=$(date "+%F %H:%M:%S%t%s")

readonly INTER_DUMP_DELAY=5

function usage(){
    log
    if [[ $# -ne 0 ]]; then
	echo "...Error: ${1}"
    fi
    echo "Backup MySql databases"
    echo ""
    echo "Usage: $0"
    exit 1
}

function verify_exclude_include {
    local nexclude
    nexclude=$1
    local ninclude
    ninclude=$2
    if [ $nexclude == 0 -a $ninclude == 0 ]; then
	echo 0
	return
    fi
    if [ $nexclude != 0 -a $ninclude != 0 ]; then
	echo "Either one or none of EXCLUDE and INCLUDE can be set (not both)"
	return
    fi
    echo 0
}

function verify_config {
    log " exclude=[${EXCLUDE[*]}] include=[${INCLUDE[*]}] "
    echo $(verify_exclude_include ${#EXCLUDE[@]} ${#INCLUDE[@]})
}

function init {

    # Find location of this script; from http://stackoverflow.com/a/246128/459050
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    readonly SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

    # We move into the directory of where this script is to have all dependencies local
    cd $SCRIPT_DIR
    . util.sh

    log "check dependencies"
    check_dependencies ${DEPENDENCIES[@]}
    if [ ! $? ]; then
	log "Dependencies not met ${DEPENDENCIES[@]}"
	usage
    fi
    log "check dependencies done"

    # mysql.sh must be file mode 700
    readonly stat=$(/usr/bin/stat -c %a mysql.sh)
    if [ ! $? ]; then
	log "stat failed for mysql.sh: either /usr/bin/stat is missing or problem with mysql.sh"
	usage
    fi

    if [ "$stat" != "700" ]; then
	log "mysql.sh is not file mode 700; it is $stat"
	usage
    fi

    . sqlite3.sh
}

function _get_meta_filename {
	local SUFFIX=".meta"
	echo "$1${SUFFIX}"
}

function _get_sha_filename {
	local SUFFIX=".sha256"
	echo "$1${SUFFIX}"
}

function _get_gz_filename {
	local SUFFIX=".gz"
	echo "$1${SUFFIX}"
}

function _get_dbdump_filename {
	local HOST="$1"
	local PORT="$2"
	local DB="$3"
	local PREFIX="database__"
	local SUFFIX=".sql"
	echo "${PREFIX}${HOST}_${PORT}_${DB}${SUFFIX}"
}

function main {
    init
    handle_arguments

    for i in {1..99}
    do
	# Always return to SCRIPT_DIR when loop restarts
	cd $SCRIPT_DIR

	# Checks to see if server $i's configuration exists. Breaks the loop if it isn't.
	./mysql.sh $i test
	local status=$?
	if [ "$status" -eq "50" ]; then
		log "No more servers found" 
		break
	fi

    # Get MySQL Server configuration from mysql.sh
    MYSQL_USER=$(./mysql.sh $i user)
    MYSQL_HOST=$(./mysql.sh $i host)
    MYSQL_PASSWORD=$(./mysql.sh $i password)
    MYSQL_PORT=$(./mysql.sh $i port)
    INCLUDE=($(./mysql.sh $i include))
    EXCLUDE=($(./mysql.sh $i exclude))

    vc=$(verify_config)
    log "vc= -$vc-"

    if [[ $vc != "0" ]]; then
	log "usage"
	usage "$vc"
    fi

    log "Creating directory"

    mkdir -p "$DESTINATION_DIR"

    SQLITE_STATUS=$(sqlite_init "$DB_FILE")
    BACKUP_ID=$(sqlite_get_next_backup_id "$DB_FILE")
    log "Record start of backup $BACKUP_ID"
    sqlite3_start_backup "$DB_FILE" $BACKUP_ID $MYSQL_USER $MYSQL_HOST $MYSQL_PORT 

    DATE=$(date +%F)

    DESTINATION_TMP="${DESTINATION_TMP_PREFIX}_${DATE}_${BACKUP_ID}_${MYSQL_HOST}_${MYSQL_PORT}"
    TMPDIR="${DESTINATION_DIR}/${DESTINATION_TMP}"
    mkdir -p "$TMPDIR"

    local tmpFile
    tmpFile=$(mktemp)
    IFS=$'\n'

    log "Connecting to mysql: host=${MYSQL_HOST} port=${MYSQL_PORT} user=${MYSQL_USER}"
    set +e
    DATABASES=( $(${MYSQL_BIN} --defaults-file=${MYSQL_CONFIG} --host=${MYSQL_HOST} --port=${MYSQL_PORT} --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} --skip-column-names < ${LIST_DATABASES} 2> $tmpFile) )
    set -e

    if [[ "${#DATABASES[@]}" -eq 0 && -z ${DATABASES[1]} ]]; then
	FATAL_ERROR=$(cat $tmpFile)
	FATAL_ERROR="[MySql error] ${FATAL_ERROR}"
	log $FATAL_ERROR
	sqlite3_fail_backup "$DB_FILE" $BACKUP_ID "${FATAL_ERROR}"
	rmdir "$TMPDIR"
	rm "$tmpFile"

	continue
    fi

    COUNT=0

    # hash for database ids
    declare -A ID_DATABASE

    log "Making database:id hash"
    #Make hash of database ID and database Name
    DATABASE_ID=$(sqlite_get_next_database_backup_id "$DB_FILE")
    log "START DATABASE_ID=${DATABASE_ID}"
    
    WANTED=()
    for DBNAME in ${DATABASES[@]}; do
	    log "Examining database: $DBNAME"

        obl=$(onBackupList $DBNAME ${INCLUDE[@]})
        onl=$(onDoNotBackupList $DBNAME ${EXCLUDE[@]})
        shouldBackup=$(should_backup $obl $onl)
        if [[ $shouldBackup == "true" ]]; then
	        log "BACKUP: $DBNAME"
            ID_DATABASE+=( ["${DBNAME}"]="${DATABASE_ID}")
	        ((DATABASE_ID++))
	        WANTED+=($DBNAME)
	    else
	        log "NOT TO BACKUP: $DBNAME"
	    fi
    done

    ###
    #return

    log "------- STARTING BACKUPS ------"
    DB_COUNT=0
    for DBNAME in ${WANTED[@]}; do
	DB_COUNT=$((DB_COUNT+1))
	DATABASE_ID="${ID_DATABASE[$DBNAME]}"

	log "   ------- STARTING BACKUP ${DB_COUNT}/${#WANTED[@]}------ DBNAME=${DBNAME}    DATABASE_ID=${DATABASE_ID} "

	local DBDUMP_FILENAME=$(_get_dbdump_filename ${MYSQL_HOST} ${MYSQL_PORT} ${DBNAME})
	local GZ_FILENAME=$(_get_gz_filename ${DBDUMP_FILENAME})
	local SHA_FILENAME=$(_get_sha_filename ${GZ_FILENAME})
	local META_FILENAME=$(_get_meta_filename ${GZ_FILENAME})
	
	log "     ------- tmpDir=$TMPDIR tmpDumpFileName=$DBDUMP_FILENAME"
	deleteIfExists "${TMPDIR}/${DBDUMP_FILENAME}"
	deleteIfExists "${TMPDIR}/${GZ_FILENAME}"
	deleteIfExists "${TMPDIR}/${SHA_FILENAME}"
	deleteIfExists "${TMPDIR}/${META_FILENAME}"

	sqlite3_start_db_backup "$DB_FILE" $DATABASE_ID $BACKUP_ID $DBNAME
        echo "./backup_single_database.sh $MYSQL_HOST $MYSQL_PORT $MYSQL_USER $MYSQL_PASSWORD $DBNAME $TMPDIR/$DBDUMP_FILENAME ${DESTINATION_DIR}/${DESTINATION_TMP}.err"
	sleep $INTER_DUMP_DELAY
    done| xargs --no-run-if-empty -I{} --max-procs $CONCURRENCY_LEVEL bash -c '
   {
   {} || exit 0
   }'

    log "------- STARTING CLEANUP ------"
    DB_COUNT=0
    for DBNAME in ${WANTED[@]}; do
	DB_COUNT=$((DB_COUNT+1))
	DATABASE_ID="${ID_DATABASE[$DBNAME]}"
	log "   ------- STARTING CLEANUP ${DB_COUNT}/${#WANTED[@]}------"
	COUNT=$((COUNT+1))

	local DBDUMP_FILENAME=$(_get_dbdump_filename ${MYSQL_HOST} ${MYSQL_PORT} ${DBNAME})
	local GZ_FILENAME=$(_get_gz_filename ${DBDUMP_FILENAME})
	local SHA_FILENAME=$(_get_sha_filename ${GZ_FILENAME})
	local META_FILENAME=$(_get_meta_filename ${GZ_FILENAME})

	if [ -f "${TMPDIR}/${GZ_FILENAME}" ]; then
	    log "Get SHA256 for ${TMPDIR}/${GZ_FILENAME}"
	    SHA256=$(get_sha 65  "${TMPDIR}/${SHA_FILENAME}")
	    FILESIZE=$(stat -c%s "${TMPDIR}/${GZ_FILENAME}")
	    sqlite3_end_db_backup "$DB_FILE" $DATABASE_ID "${GZ_FILENAME}" $FILESIZE $SHA256
	else
	    log "  ERROR: Missing dump file: ${TMPDIR}/${GZ_FILENAME}"
	    return 42
	fi
    done

    log "------- STARTING EVENT CLEANUP------"
    if [ "$COUNT" -ne 0 ]; then 
	log "TMPDIR=$TMPDIR"
	echo "START: $timeStamp" > $TMPDIR/00database2.meta
	timeStamp=$(date +%F%t%H:%M:%S%t%s)
	echo "END: $timeStamp" >> $TMPDIR/00database2.meta

	cd "$DESTINATION_DIR"
	cp "${DESTINATION_TMP}/00database2.meta" "${TMPDIR}.meta"
	chmod 400 "${TMPDIR}.meta"
	ALL_DB_TAR=${DESTINATION_TMP}.tar

	tar cvf "${DESTINATION_TMP}.tar" "${DESTINATION_TMP}" > /dev/null
	chmod 400 "${DESTINATION_TMP}.tar"

	sha256sum "${DESTINATION_TMP}.tar" > "${DESTINATION_TMP}.tar.sha256"
	chmod 400 "${DESTINATION_TMP}.tar.sha256"

	SHA256=$(get_sha 65 "${DESTINATION_TMP}.tar.sha256")
	FILESIZE=$(stat -c%s "${DESTINATION_TMP}.tar")

	rm -r "${DESTINATION_TMP}"

	if sqlite_have_sqlite3; then
	    log "INFO" "Write records of backup to database"
	fi
	sqlite3_end_backup "$DB_FILE" $BACKUP_ID "${DESTINATION_DIR}/${DESTINATION_TMP}.tar" $SHA256 $FILESIZE
    else
	sqlite3_end_backup "$DB_FILE" $BACKUP_ID "NULL" "NULL" 0
    fi

    if [ -e "$DB_FILE_COPY" ]; then
	chmod 644 "$DB_FILE_COPY"
    fi

    # The following is supported only if sqlite3 exists
    sqlite_backup_db "$DB_FILE" "$DB_FILE_COPY"

    unset ID_DATABASE
    done
}

function handle_arguments {
    true
}

################
main $@
################

